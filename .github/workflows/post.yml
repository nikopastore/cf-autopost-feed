name: Generate and publish RSS item (AM/PM)

permissions:
  contents: write

on:
  schedule:
    - cron: "40 14 * * *"   # 14:40 UTC -> 07:40 America/Phoenix
    - cron: "10 21 * * *"   # 21:10 UTC -> 14:10 America/Phoenix
  workflow_dispatch:

jobs:
  build-feed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Mark repo safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Generate RSS item
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BRAND: "Career Forge"
          SITE_URL: "https://nikopastore.github.io/cf-autopost-feed/"
        run: python build_rss.py

      # Optional: keep this if you still want to normalize old items
      - name: Strip timestamps from titles/descriptions and ensure GUIDs
        run: |
          python - <<'PY'
          import xml.etree.ElementTree as ET
          import re, hashlib, sys
          FEED = "rss.xml"
          def norm_entities(s: str) -> str:
              return (s or "") \
                .replace("&nbsp;", " ") \
                .replace("&mdash;", "—").replace("&#8212;", "—") \
                .replace("&ndash;", "–").replace("&#8211;", "–")
          STAMP_RE = re.compile(r"""(?isx)\s*(?:—|–|-|\||:)?\s*(?:\(|\[)?\s*(?:\d{4}[-/]\d{2}[-/]\d{2}(?:[ T]\d{1,2}:\d{2}(?::\d{2})?\s?(?:AM|PM)?)?(?:\s?[A-Z]{2,4})?|\d{1,2}/\d{1,2}/\d{2,4})\s*(?:\)|\])?\s*$""")
          def strip_tail(s: str | None) -> str | None:
              if s is None: return None
              return STAMP_RE.sub("", norm_entities(s))
          try:
              tree = ET.parse(FEED)
          except Exception as e:
              print(f"Failed to parse {FEED}: {e}", file=sys.stderr); sys.exit(1)
          root = tree.getroot(); ch = root.find("channel")
          if ch is None: print("No <channel>", file=sys.stderr); sys.exit(1)
          changed = False
          for item in ch.findall("item"):
              for tag in ("title","description"):
                  n = item.find(tag)
                  if n is not None and (n.text or "").strip():
                      new_text = strip_tail(n.text)
                      if new_text != n.text:
                          n.text = new_text; changed = True
              guid = item.find("guid")
              if guid is None or not (guid.text or "").strip():
                  base = (item.findtext("link") or "") + "|" + (item.findtext("title") or "") + "|" + (item.findtext("pubDate") or "")
                  digest = hashlib.sha1(base.encode("utf-8", errors="ignore")).hexdigest()
                  guid = ET.SubElement(item, "guid", attrib={"isPermaLink": "false"})
                  guid.text = digest; changed = True
              else:
                  if guid.get("isPermaLink") is None:
                      guid.set("isPermaLink","false")
          if changed:
              tree.write(FEED, encoding="utf-8", xml_declaration=True)
              print("rss.xml updated")
          else:
              print("No changes detected by stripper")
          PY

      - name: Commit & push main RSS
        run: |
          git config user.name "cf-bot"
          git config user.email "cf-bot@users.noreply.github.com"
          branch=$(git rev-parse --abbrev-ref HEAD)
          git pull --rebase --autostash origin "$branch"
          git add rss.xml
          if ! git diff --cached --quiet; then
            git commit -m "Add RSS item (normalized) [skip ci]"
          else
            echo "No changes to commit for rss.xml"
          fi
          git push origin "$branch"

      # Build BOTH X feeds: full + live (1-item)
      - name: Build X feeds (rss_x.xml + rss_x_live.xml)
        run: python scripts/make_x_feed.py

      - name: Commit & push X feeds
        run: |
          git config user.name "cf-bot"
          git config user.email "cf-bot@users.noreply.github.com"
          branch=$(git rev-parse --abbrev-ref HEAD)
          git pull --rebase --autostash origin "$branch"
          git add rss_x.xml rss_x_live.xml
          if ! git diff --cached --quiet; then
            git commit -m "Build/Update X feeds [skip ci]"
          else
            echo "No changes to commit for X feeds"
          fi
          git push origin "$branch"
