      - name: Strip timestamps from titles/descriptions and ensure GUIDs
        run: |
          python - <<'PY'
          import xml.etree.ElementTree as ET
          import re, hashlib, sys

          FEED = "rss.xml"

          # Normalize common HTML entities that often show up around the stamp
          def norm_entities(s: str) -> str:
              return (s or "") \
                .replace("&nbsp;", " ") \
                .replace("&mdash;", "—").replace("&#8212;", "—") \
                .replace("&ndash;", "–").replace("&#8211;", "–")

          # Robust trailing-timestamp remover that tolerates:
          # - optional wrappers (<em>/<i>/<span>/<strong>/<b>)
          # - various separators (—, –, -, |, :)
          # - date formats: YYYY-MM-DD[ time[AM/PM TZ]] or M/D/YYYY
          STAMP_RE = re.compile(r"""(?isx)
              \s*
              (?:</?(?:em|i|strong|b|span)[^>]*>\s*)*   # optional inline tags
              (?:—|–|-|\||:)?\s*                        # optional separator
              (?:\(|\[)?\s*                             # optional open paren/bracket
              (?:
                 \d{4}[-/]\d{2}[-/]\d{2}                # 2025-10-11 or 2025/10/11
                 (?:[ T]\d{1,2}:\d{2}(?::\d{2})?\s?(?:AM|PM)?)? # optional time
                 (?:\s?[A-Z]{2,4})?                     # optional TZ like PT/UTC
               |
                 \d{1,2}/\d{1,2}/\d{2,4}                # 10/11/2025 style
              )
              \s*(?:\)|\])?                              # optional close paren/bracket
              \s*
              (?:</?(?:em|i|strong|b|span)[^>]*>\s*)*   # optional inline tags
              \s*$
          """)

          def strip_tail(s: str | None) -> str | None:
              if s is None: return None
              s2 = norm_entities(s)
              return STAMP_RE.sub("", s2)

          tree = ET.parse(FEED)
          root = tree.getroot()
          ch = root.find("channel")
          if ch is None:
              print("No <channel> in rss.xml", file=sys.stderr)
              sys.exit(1)

          changed = False

          for item in ch.findall("item"):
              # Clean title & description tails
              for tag in ("title", "description"):
                  n = item.find(tag)
                  if n is not None and (n.text or "").strip():
                      new_text = strip_tail(n.text)
                      if new_text != n.text:
                          n.text = new_text
                          changed = True

              # Ensure a stable GUID if missing
              g = item.find("guid")
              if g is None or not (g.text or "").strip():
                  base = (item.findtext("link") or "") + "|" + (item.findtext("title") or "") + "|" + (item.findtext("pubDate") or "")
                  digest = hashlib.sha1(base.encode("utf-8", errors="ignore")).hexdigest()
                  g = ET.SubElement(item, "guid", attrib={"isPermaLink": "false"})
                  g.text = digest
                  changed = True

          if changed:
              tree.write(FEED, encoding="utf-8", xml_declaration=True)
              print("rss.xml updated")
          else:
              print("No changes detected by stripper")
          PY
